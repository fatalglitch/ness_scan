#!/usr/bin/env python

import json
import argparse
import sys
import requests
import polling
import urllib3
import logging
import smtplib
import os
from email.mime.multipart import MIMEMultipart
from email.mime.base import MIMEBase
from email.mime.text import MIMEText
from email.utils import COMMASPACE, formatdate
from email import encoders

try:
    import configparser as ConfigParser
except:
    import ConfigParser

def getSession(uri,port,l,p):
    global session
    url = "https://%s:%s%s" % (uri,port,"/session")
    payload = {'username': l, 'password': p}
    token = requests.post(url,json=payload,headers=headers,verify=False)
    logger.debug('Session request result: %s', token.json())
    logger.info('Retrieved Session Token: %s', token.json()["token"])
    session.headers.update({'X-Cookie': 'token=' + (token.json())["token"]})

# Function for Policy Creation
def createPolicy(session,nesshost,nessport):
    # Set the URL for this REST call
    url = "https://%s:%s%s" % (nesshost, nessport, "/policies")
    data = open(args.policy).read()
    r = session.post(url, data=data, headers=headers, verify=False)
    logger.debug('createPolicy request result: %s', r.json())
    logger.debug('Retrieved Policy ID: %s', r.json()["policy_id"])
    return(r.json()["policy_id"])

def deletePolicy(session):
    url = "https://%s:%s%s%s" % (nesshost, nessport, "/policies/", policyid)
    r = session.delete(url, headers=headers, verify=False)
    logger.info('Deleted Policy %s', policyid)

def createScan(session):
    # Set the URL for this REST call
    url = "https://%s:%s%s" % (nesshost, nessport, "/scans")

    myscan = {}
    myscan['uuid'] = templateid

    settings = {'name': scan_name,
    'description': scan_desc,
    'enabled': scan_enabled,
    'launch': scan_launch,
    'policy_id': policyid,
    'text_targets': scan_targets
    }

    myscan['settings'] = settings

    scanjson = json.dumps(myscan)

    logger.debug('Scanner JSON is: %s', scanjson)

    r = session.post(url, data=scanjson, headers=headers, verify=False)
    logger.info('Created Scan ID: %s', r.json()['scan']['id'])
    return(r.json()['scan']['id'])

def deleteScan(session):
    url = "https://%s:%s%s%s" % (nesshost, nessport, "/scans/", scanid)
    r = session.delete(url, headers=headers, verify=False)
    logger.info('Deleted Scan ID: %s', scanid)

def launchScan(session):
    url = "https://%s:%s%s%s%s" % (nesshost, nessport, "/scans/", scanid, "/launch")
    logger.info('Launching Scan ID: %s', scanid)
    r = session.post(url, headers=headers, verify=False)
    logger.debug('Launched Scan ID %s: %s', scanid, r.json())

def getScanTemplateUUID(session,nesshost,nessport):
    url = "https://%s:%s%s" % (nesshost, nessport, "/editor/policy/templates")
    r = session.get(url, headers=headers, verify=False)
    #print(r.json()['templates'][0]['name'])
    for tc in r.json()['templates']:
        if tc['name'] == "custom":
            uuid = tc['uuid']
    return(uuid)

def scan_response(response):
    if response.json()['info']['status'] == "completed":
        logger.info('Scan has completed...')
        return True
    else:
        logger.info("Polling while waiting for scanner to finish...")
        logger.debug('Polling result was: %s', response.json()['info']['status'])
        return False

def report_response(response):
    if response.json()['status'] == "ready":
        logger.info('Report Generation has completed...')
        return True
    else:
        logger.info("Polling while waiting for report generation to finish...")
        logger.debug('Polling result was: %s', response.json()['status'])
        return False


def scanPolling(session):
    url = "https://%s:%s%s%s" % (nesshost, nessport, "/scans/", scanid)
    try:
        # Poll every 10 seconds for 82800 seconds (23 hours)
        polling.poll(lambda: session.get(url, headers=headers, verify=False), check_success=scan_response, step=10,
                     timeout=82800)
    except polling.TimeoutException:
        logger.info("Timeout waiting for Scan to complete...")
        print("Timed out waiting for Scan to complete. Check logs for additional information.")
        sys.exit(1)

def getReport(session):
    url = "https://%s:%s%s%s%s" % (nesshost, nessport, "/scans/", scanid, "/export")

    report = {}
    report['format'] = report_format
    report['chapters'] = report_types
    reportjson = json.dumps(report)

    r = session.post(url, data=reportjson, headers=headers, verify=False)
    logger.debug('Output from Report Generation: %s', r.json())
    filenum = r.json()['file']

    reporturl = "https://%s:%s%s%s%s%s%s" % (nesshost, nessport, "/scans/", scanid, "/export/", filenum, "/status")
    try:
        # Poll every 5 seconds for 300 seconds (5 minutes)
        polling.poll(lambda: session.get(reporturl, headers=headers, verify=False), check_success=report_response, step=5,
                     timeout=300)
    except polling.TimeoutException:
        logger.info("Timeout waiting for Report Generation to complete...")
        print("Timed out waiting for Report Generation to complete. Check logs for additional information.")
        sys.exit(1)

    pullreporturl = "https://%s:%s%s%s%s%s%s" % (nesshost, nessport, "/scans/", scanid, "/export/", filenum, "/download")
    r = session.get(pullreporturl, headers=headers, verify=False, stream=True)
    with open(report_filename, 'wb') as f:
        for chunk in r.iter_content(chunk_size=1024):
            if chunk:
                f.write(chunk)
    logger.info('Report downloaded to %s', report_filename)

def send_mail(send_from, send_to, subject, text, filetosend, server, port):
    msg = MIMEMultipart()
    msg['From'] = send_from
    msg['To'] = send_to
    msg['Date'] = formatdate(localtime=True)
    msg['Subject'] = subject

    msg.attach(MIMEText(text))

    part = MIMEBase('application', "octet-stream")
    part.set_payload(open(filetosend, "rb").read())
    encoders.encode_base64(part)
    part.add_header('Content-Disposition', 'attachment; filename="{0}"'.format(os.path.basename(filetosend)))
    msg.attach(part)

    smtp = smtplib.SMTP(server, port)
    smtp.sendmail(send_from, send_to, msg.as_string())
    smtp.quit()


# Arguments for script
parser = argparse.ArgumentParser()
parser.add_argument("-c", "--config", default='example.cfg', help="config file to use")
parser.add_argument("-t", "--targets",default='',help="targets for the scan")
parser.add_argument("-p", "--policy",default='Example_Policy.json',help="Scanning Policy File to Use")
parser.add_argument("-d", "--debug", action='store_true', help="enable Debug Logging")
parser.add_argument("-e", "--debugemail", action='store_true', help="DEBUG: only email report")

args = parser.parse_args()

# Disable Certificate warnings
urllib3.disable_warnings()

#if not args.config:
#    print("No config file specified, please specify with -c")
#    sys.exit(1)

# Read in Config File
config = ConfigParser.ConfigParser()
config.readfp(open(args.config))

try:
    login = config.get('server', 'login')
    password = config.get('server', 'password')
    nesshost = config.get('server', 'uri')
    nessport = config.get('server', 'port')
    scan_name = config.get('scan', 'name')
    scan_desc = config.get('scan', 'description')
    scan_enabled = config.get('scan', 'enabled')
    scan_launch = config.get('scan', 'launch')
    if not args.targets:
        scan_targets = config.get('scan', 'targets')
    else:
        scan_targets = args.targets
    report_format = config.get('report', 'format')
    report_types = config.get('report', 'types')
    report_filename = config.get('report', 'filename')
    email_from = config.get('email', 'from')
    email_to = config.get('email', 'to')
    email_server = config.get('email', 'server')
    email_port = config.get('email', 'port')
except:
    pass

#Implement Logging
# https://fangpenlin.com/posts/2012/08/26/good-logging-practice-in-python/
logger = logging.getLogger(__name__)
if args.debug:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)
handler = logging.FileHandler('ness_scan.log')
if args.debug:
    logger.setLevel(logging.DEBUG)
else:
    logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')
handler.setFormatter(formatter)
logger.addHandler(handler)
# End Logging Setup

# Global Variables
headers = {'Content-Type': 'application/json'}
session = requests.Session()

# The Main Show starts here

if args.debugemail:
    logger.debug('Filename is: %s', report_filename)
    send_mail(email_from, email_to, "Nessus Scanning Results", '', report_filename, email_server, email_port)
    sys.exit(0)

logger.info('-----START-----')
logger.info('Scanner Start')
getSession(nesshost,nessport,login,password)

# Create the Nessus Policy
policyid = createPolicy(session,nesshost,nessport)

# Create the Nessus Scan
templateid = getScanTemplateUUID(session,nesshost,nessport)
scanid = createScan(session)

#Launch the Scan
launchScan(session)

#Wait for the scan to finish
scanPolling(session)

#Generate and Download Report
getReport(session)

#Email Report
send_mail(email_from, email_to, "Nessus Scanning Results", '', report_filename, email_server, email_port)

#Cleanup
deleteScan(session)
deletePolicy(session)

logger.info('Scanner Work is Completed')
logger.info('-----END-----')